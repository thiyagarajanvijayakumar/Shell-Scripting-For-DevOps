#!/bin/bash

# Full Zabbix Installation and Mattermost Webhook Alerts Configuration Script for Ubuntu 24.04 (AWS EC2)
# Purpose: Automates the installation of Zabbix 7.0 server, frontend, and agent, configures NGINX and MariaDB,
# and sets up Mattermost webhook alerts for monitoring an EC2 instance.
# Prerequisites: Ubuntu 24.04 AMI, internet access, sudo privileges, and an EC2 security group allowing SSH (port 22).

# Exit on any error to prevent partial execution
set -e

# Function to check if a command executed successfully
# Arguments: $1 - Error message to display if the command fails
check_status() {
    if [ $? -ne 0 ]; then
        echo "Error: $1"
        exit 1
    fi
}

# Function to wait for the Zabbix server to be ready
# Purpose: Ensures the Zabbix web interface is accessible before making API calls
wait_for_zabbix() {
    echo "Waiting for Zabbix server to be ready..."
    # Attempt to connect to the Zabbix web interface for up to 60 seconds
    for i in {1..30}; do
        if curl -s http://127.0.0.1/zabbix >/dev/null; then
            echo "Zabbix server is ready!"
            return 0
        fi
        sleep 2
    done
    echo "Error: Zabbix server not ready after 60 seconds."
    exit 1
}

# Set variables from environment or defaults
# Purpose: Define configuration variables for database, Zabbix admin, timezone, and Mattermost webhook
# Note: Hardcoded defaults are used for demonstration; in production, use environment variables or a secrets manager
DB_PASSWORD="${DB_PASSWORD:-R^s.<2qcc<mTXGBy}" # Database password for MariaDB root and Zabbix user
ZABBIX_ADMIN_PASSWORD="${ZABBIX_ADMIN_PASSWORD:-zabbix}" # Default Zabbix Admin password
TIMEZONE="${TIMEZONE:-Asia/Kolkata}" # System and PHP timezone
MATTERMOST_URL="${MATTERMOST_URL:-https://chat.pheonixsolutions.com/hooks/rpxwunk59tnd3eawfkuj5hraba}" # Mattermost webhook URL
SEND_TO="${SEND_TO:-xb1mmswkb3f1f8yehd4sz8e1qo}" # Mattermost channel ID for prod-alerts-from-zabbix

# Validate input variables to ensure they are not empty
if [ -z "$DB_PASSWORD" ]; then
    echo "Error: Database password cannot be empty."
    exit 1
fi
if [ -z "$TIMEZONE" ]; then
    TIMEZONE="UTC"
    echo "No timezone provided, defaulting to UTC."
fi
if [ -z "$MATTERMOST_URL" ]; then
    echo "Error: Mattermost URL cannot be empty."
    exit 1
fi
if [ -z "$SEND_TO" ]; then
    echo "Error: Mattermost channel ID cannot be empty."
    exit 1
fi
if [ -z "$ZABBIX_ADMIN_PASSWORD" ]; then
    echo "Error: Zabbix Admin password cannot be empty."
    exit 1
fi

# Announce the start of the installation process
echo "Starting Zabbix installation and Mattermost webhook configuration on new instance..."

# Step 1: Update system
# Purpose: Ensure the system is up-to-date with the latest packages and security patches
echo "Updating system packages..."
sudo apt update
check_status "Failed to update package lists."
sudo apt full-upgrade -y
check_status "Failed to upgrade packages."

# Set system timezone
# Purpose: Configure the system timezone to ensure consistent time handling
echo "Setting system timezone to $TIMEZONE..."
sudo timedatectl set-timezone "$TIMEZONE"
check_status "Failed to set system timezone."

# Install jq for JSON parsing
# Purpose: Install jq to process JSON responses from Zabbix API calls
echo "Installing jq..."
sudo apt install jq -y
check_status "Failed to install jq."

# Ensure Apache2 is stopped and disabled
# Purpose: Prevent conflicts with NGINX by stopping and disabling Apache2 if present
echo "Ensuring Apache2 is stopped and disabled..."
sudo systemctl stop apache2 2>/dev/null || true
sudo systemctl disable apache2 2>/dev/null || true

# Step 2: Install MariaDB
# Purpose: Install MariaDB server and client for the Zabbix database
echo "Installing MariaDB..."
sudo apt install mariadb-server mariadb-client -y
check_status "Failed to install MariaDB."

# Secure MariaDB installation non-interactively
# Purpose: Set root password, remove anonymous users, drop test database, and restrict root access
echo "Securing MariaDB installation..."
sudo mysql -u root -e "
ALTER USER 'root'@'localhost' IDENTIFIED BY '$DB_PASSWORD';
DELETE FROM mysql.global_priv WHERE User='';
DELETE FROM mysql.global_priv WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');
DROP DATABASE IF EXISTS test;
DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';
FLUSH PRIVILEGES;"
check_status "Failed to secure MariaDB."

# Create Zabbix database and user
# Purpose: Create a dedicated database and user for Zabbix with appropriate privileges
echo "Creating Zabbix database and user..."
sudo mysql -u root -p"$DB_PASSWORD" -e "
CREATE DATABASE zabbix CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;
CREATE USER 'zabbix'@'localhost' IDENTIFIED BY '$DB_PASSWORD';
GRANT ALL PRIVILEGES ON zabbix.* TO 'zabbix'@'localhost';
FLUSH PRIVILEGES;"
check_status "Failed to create Zabbix database or user."

# Step 3: Install NGINX and PHP-FPM
# Purpose: Install NGINX as the web server and PHP-FPM with required modules for Zabbix frontend
echo "Installing NGINX and PHP-FPM..."
sudo apt install nginx php8.3-fpm php8.3-mysql php8.3-gd php8.3-xml php8.3-bcmath php8.3-mbstring php8.3-ldap php8.3-curl php8.3-apcu php8.3-dom -y
check_status "Failed to install NGINX and PHP-FPM."

# Configure PHP settings
# Purpose: Adjust PHP-FPM settings to meet Zabbix requirements
PHP_INI=$(find /etc/php -name php.ini | grep fpm | head -n 1)
if [ -z "$PHP_INI" ]; then
    echo "Error: PHP-FPM configuration file (php.ini) not found."
    exit 1
fi
echo "Configuring PHP in $PHP_INI..."
sudo sed -i "s/memory_limit = .*/memory_limit = 128M/" "$PHP_INI"
sudo sed -i "s/post_max_size = .*/post_max_size = 16M/" "$PHP_INI"
sudo sed -i "s/upload_max_filesize = .*/upload_max_filesize = 2M/" "$PHP_INI"
sudo sed -i "s/max_execution_time = .*/max_execution_time = 300/" "$PHP_INI"
sudo sed -i "s/max_input_time = .*/max_input_time = 300/" "$PHP_INI"
sudo sed -i "s|;date.timezone =.*|date.timezone = $TIMEZONE|" "$PHP_INI"
check_status "Failed to configure PHP."

# Restart NGINX and PHP-FPM
# Purpose: Apply PHP configuration changes and ensure services are running
echo "Restarting NGINX and PHP-FPM..."
sudo systemctl restart nginx php8.3-fpm
check_status "Failed to restart NGINX or PHP-FPM."

# Step 4: Install Zabbix
# Purpose: Add Zabbix repository and install server, frontend, agent, and SQL scripts
echo "Adding Zabbix repository..."
wget https://repo.zabbix.com/zabbix/7.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_7.0-1+ubuntu24.04_all.deb
check_status "Failed to download Zabbix repository package."
sudo dpkg -i zabbix-release_7.0-1+ubuntu24.04_all.deb
check_status "Failed to install Zabbix repository package."
sudo apt update
check_status "Failed to update package lists after adding Zabbix repository."

echo "Installing Zabbix packages..."
sudo apt install zabbix-server-mysql zabbix-frontend-php zabbix-nginx-conf zabbix-sql-scripts zabbix-agent -y
check_status "Failed to install Zabbix packages."

# Import Zabbix database schema
# Purpose: Populate the Zabbix database with the required schema
echo "Importing Zabbix database schema..."
zcat /usr/share/zabbix-sql-scripts/mysql/server.sql.gz | mysql --default-character-set=utf8mb4 -uzabbix -p"$DB_PASSWORD" zabbix
check_status "Failed to import Zabbix database schema."

# Configure Zabbix server
# Purpose: Set the database password in the Zabbix server configuration
echo "Configuring Zabbix server..."
sudo sed -i "s/# DBPassword=/DBPassword=$DB_PASSWORD/" /etc/zabbix/zabbix_server.conf
check_status "Failed to configure Zabbix server."

# Configure NGINX for Zabbix
# Purpose: Enable the Zabbix frontend by configuring NGINX to listen on port 80
echo "Configuring NGINX for Zabbix..."
sudo sed -i 's/# listen 80;/listen 80;/' /etc/zabbix/nginx.conf
sudo sed -i 's/# server_name _;/server_name _;/' /etc/zabbix/nginx.conf
check_status "Failed to configure NGINX for Zabbix."

# Ensure Zabbix NGINX config is included (avoid duplicates)
# Purpose: Add Zabbix NGINX configuration to the main NGINX config if not already present
if ! grep -q "include /etc/zabbix/nginx.conf" /etc/nginx/nginx.conf; then
    sudo sed -i '/http {/a \    include /etc/zabbix/nginx.conf;' /etc/nginx/nginx.conf
    check_status "Failed to add Zabbix NGINX config to nginx.conf."
fi

# Restart and enable services
# Purpose: Restart services to apply configurations and enable them to start on boot
echo "Restarting and enabling services..."
sudo systemctl restart zabbix-server zabbix-agent nginx php8.3-fpm
check_status "Failed to restart services."
sudo systemctl enable zabbix-server zabbix-agent nginx php8.3-fpm
check_status "Failed to enable services."

# Wait for Zabbix to be ready before API calls
# Purpose: Ensure the Zabbix server is fully operational for API interactions
wait_for_zabbix

# Step 5: Configure Mattermost Webhook Alerts
# Purpose: Set up Zabbix to send alerts to a Mattermost channel via a webhook
echo "Configuring Zabbix for Mattermost webhook alerts..."

# Download Mattermost media type YAML
# Purpose: Retrieve the Mattermost media type configuration from Zabbix's repository
echo "Downloading Mattermost media type YAML..."
wget https://git.zabbix.com/projects/ZBX/repos/zabbix/raw/templates/media/mattermost/media_mattermost.yaml -O /tmp/media_mattermost.yaml
check_status "Failed to download Mattermost media type YAML."

# Import Mattermost media type
# Purpose: Import the Mattermost media type into Zabbix using the API
echo "Importing Mattermost media type..."
zabbix_api_import() {
    # Authenticate with Zabbix API to obtain a session token
    AUTH_TOKEN=$(curl -s -X POST -H "Content-Type: application/json" -d '{
        "jsonrpc": "2.0",
        "method": "user.login",
        "params": {
            "username": "Admin",
            "password": "'"$ZABBIX_ADMIN_PASSWORD"'"
        },
        "id": 1
    }' http://127.0.0.1/zabbix/api_jsonrpc.php | jq -r '.result // empty')

    if [ -z "$AUTH_TOKEN" ]; then
        echo "Error: Failed to authenticate with Zabbix API."
        exit 1
    fi

    # Encode YAML content as a JSON-safe string to prevent syntax errors
    YAML_CONTENT=$(cat /tmp/media_mattermost.yaml | jq -sR .)
    if [ -z "$YAML_CONTENT" ]; then
        echo "Error: Failed to read or encode YAML content."
        exit 1
    fi

    # Construct JSON payload for importing the media type
    JSON_PAYLOAD=$(jq -n --arg auth "$AUTH_TOKEN" --arg yaml "$YAML_CONTENT" '{
        "jsonrpc": "2.0",
        "method": "configuration.import",
        "params": {
            "format": "yaml",
            "rules": {
                "media_types": {
                    "createMissing": true,
                    "updateExisting": true
                }
            },
            "source": $yaml
        },
        "auth": $auth,
        "id": 2
    }')

    # Validate the JSON payload
    if ! echo "$JSON_PAYLOAD" | jq . >/dev/null 2>&1; then
        echo "Error: Invalid JSON payload generated."
        echo "JSON_PAYLOAD: $JSON_PAYLOAD"
        exit 1
    fi

    # Send the import request to the Zabbix API
    RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" -d "$JSON_PAYLOAD" http://127.0.0.1/zabbix/api_jsonrpc.php)
    if ! echo "$RESPONSE" | jq -e '.result' >/dev/null; then
        echo "Error: Failed to import Mattermost media type: $RESPONSE"
        exit 1
    fi
}
zabbix_api_import
check_status "Failed to import Mattermost media type."

# Configure Mattermost media type for webhook
# Purpose: Update the Mattermost media type with the provided webhook URL
echo "Configuring Mattermost webhook media type..."
zabbix_api_configure_media() {
    # Authenticate with Zabbix API
    AUTH_TOKEN=$(curl -s -X POST -H "Content-Type: application/json" -d '{
        "jsonrpc": "2.0",
        "method": "user.login",
        "params": {
            "username": "Admin",
            "password": "'"$ZABBIX_ADMIN_PASSWORD"'"
        },
        "id": 1
    }' http://127.0.0.1/zabbix/api_jsonrpc.php | jq -r '.result // empty')

    # Retrieve the Mattermost media type ID
    MEDIA_TYPE_ID=$(curl -s -X POST -H "Content-Type: application/json" -d '{
        "jsonrpc": "2.0",
        "method": "mediatype.get",
        "params": {
            "filter": {"name": "Mattermost"}
        },
        "auth": "'"$AUTH_TOKEN"'",
        "id": 3
    }' http://127.0.0.1/zabbix/api_jsonrpc.php | jq -r '.result[0].mediatypeid // empty')

    if [ -z "$MEDIA_TYPE_ID" ]; then
        echo "Error: Failed to retrieve Mattermost media type ID."
        exit 1
    fi

    # Update the media type with the Mattermost webhook URL
    RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" -d '{
        "jsonrpc": "2.0",
        "method": "mediatype.update",
        "params": {
            "mediatypeid": "'"$MEDIA_TYPE_ID"'",
            "parameters": [
                {"name": "mattermost_url", "value": "'"$MATTERMOST_URL"'"}
            ]
        },
        "auth": "'"$AUTH_TOKEN"'",
        "id": 4
    }' http://127.0.0.1/zabbix/api_jsonrpc.php)
    if ! echo "$RESPONSE" | jq -e '.result' >/dev/null; then
        echo "Error: Failed to configure Mattermost webhook media type: $RESPONSE"
        exit 1
    fi
}
zabbix_api_configure_media
check_status "Failed to configure Mattermost webhook media type."

# Add Mattermost media to Admin user
# Purpose: Assign the Mattermost media type to the Admin user for receiving alerts
echo "Adding Mattermost media to Admin user..."
zabbix_api_add_user_media() {
    # Authenticate with Zabbix API
    AUTH_TOKEN=$(curl -s -X POST -H "Content-Type: application/json" -d '{
        "jsonrpc": "2.0",
        "method": "user.login",
        "params": {
            "username": "Admin",
            "password": "'"$ZABBIX_ADMIN_PASSWORD"'"
        },
        "id": 1
    }' http://127.0.0.1/zabbix/api_jsonrpc.php | jq -r '.result // empty')

    # Retrieve the Admin user ID
    USER_ID=$(curl -s -X POST -H "Content-Type: application/json" -d '{
        "jsonrpc": "2.0",
        "method": "user.get",
        "params": {
            "filter": {"username": "Admin"}
        },
        "auth": "'"$AUTH_TOKEN"'",
        "id": 5
    }' http://127.0.0.1/zabbix/api_jsonrpc.php | jq -r '.result[0].userid // empty')

    if [ -z "$USER_ID" ]; then
        echo "Error: Failed to retrieve Admin user ID."
        exit 1
    fi

    # Retrieve the Mattermost media type ID
    MEDIA_TYPE_ID=$(curl -s -X POST -H "Content-Type: application/json" -d '{
        "jsonrpc": "2.0",
        "method": "mediatype.get",
        "params": {
            "filter": {"name": "Mattermost"}
        },
        "auth": "'"$AUTH_TOKEN"'",
        "id": 6
    }' http://127.0.0.1/zabbix/api_jsonrpc.php | jq -r '.result[0].mediatypeid // empty')

    # Assign the media type to the Admin user
    RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" -d '{
        "jsonrpc": "2.0",
        "method": "user.updatemedia",
        "params": {
            "users": [{"userid": "'"$USER_ID"'"}],
            "medias": [{
                "mediatypeid": "'"$MEDIA_TYPE_ID"'",
                "sendto": "'"$SEND_TO"'",
                "active": 0,
                "severity": 63,
                "period": "1-7,00:00-24:00"
            }]
        },
        "auth": "'"$AUTH_TOKEN"'",
        "id": 7
    }' http://127.0.0.1/zabbix/api_jsonrpc.php)
    if ! echo "$RESPONSE" | jq -e '.result' >/dev/null; then
        echo "Error: Failed to add Mattermost media to Admin user: $RESPONSE"
        exit 1
    fi
}
zabbix_api_add_user_media
check_status "Failed to add Mattermost media to Admin user."

# Create Mattermost alert action
# Purpose: Create an action to send alerts to Mattermost for high-severity events
echo "Creating Mattermost alert action..."
zabbix_api_create_action() {
    # Authenticate with Zabbix API
    AUTH_TOKEN=$(curl -s -X POST -H "Content-Type: application/json" -d '{
        "jsonrpc": "2.0",
        "method": "user.login",
        "params": {
            "username": "Admin",
            "password": "'"$ZABBIX_ADMIN_PASSWORD"'"
        },
        "id": 1
    }' http://127.0.0.1/zabbix/api_jsonrpc.php | jq -r '.result // empty')

    # Create an action to send notifications via the Mattermost media type
    RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" -d '{
        "jsonrpc": "2.0",
        "method": "action.create",
        "params": {
            "name": "Mattermost Alerts",
            "eventsource": 0,
            "status": 0,
            "esc_period": "1h",
            "filter": {
                "evaltype": 0,
                "conditions": [
                    {
                        "conditiontype": 3,
                        "operator": 2,
                        "value": "4"
                    }
                ]
            },
            "operations": [
                {
                    "operationtype": 0,
                    "opmessage": {
                        "default_msg": 1,
                        "mediatypeid": "'"$MEDIA_TYPE_ID"'"
                    },
                    "opmessage_usr": [{"userid": "'"$USER_ID"'"}]
                }
            ]
        },
        "auth": "'"$AUTH_TOKEN"'",
        "id": 8
    }' http://127.0.0.1/zabbix/api_jsonrpc.php)
    if ! echo "$RESPONSE" | jq -e '.result' >/dev/null; then
        echo "Error: Failed to create Mattermost alert action: $RESPONSE"
        exit 1
    fi
}
zabbix_api_create_action
check_status "Failed to create Mattermost alert action."

# Announce successful completion
echo "Zabbix installation and Mattermost webhook alerts configuration completed successfully!"
echo "Please complete the following manual steps:"

# Instructions for manual steps
# Purpose: Provide guidance for completing the Zabbix setup via the web interface and testing
cat << EOF
Manual Steps to Complete Zabbix Setup:
1. Configure EC2 Security Group:
   - In the AWS EC2 console, add an inbound rule to the instance's security group:
     - Type: HTTP, Protocol: TCP, Port: 80, Source: 0.0.0.0/0 (or your IP for security).
     - Type: Custom TCP, Protocol: TCP, Port: 10050 (Zabbix agent), Source: 127.0.0.1.

2. Complete Zabbix Web Setup:
   - Access http://<your-ec2-ip>/zabbix (find IP with 'curl http://169.254.169.254/latest/meta-data/public-ipv4').
   - Follow the wizard:
     - Welcome: Next.
     - Prerequisites: Ensure all OK, Next.
     - Database: Name 'zabbix', User 'zabbix', Password '$DB_PASSWORD', Next.
     - Server details: Default, Next.
     - GUI settings: Set timezone to '$TIMEZONE', Next.
     - Summary: Next.
     - Finish.
   - Log in with Username: Admin, Password: $ZABBIX_ADMIN_PASSWORD.
   - Change Admin password under Administration > Users > Admin.

3. Verify Mattermost Incoming Webhook:
   - In Mattermost (https://chat.pheonixsolutions.com), ensure JavaScript is enabled in your browser.
   - Go to Main Menu > Integrations > Incoming Webhooks > Add Incoming Webhook.
   - Title: Zabbix Alerts, Channel: prod-alerts-from-zabbix (ID: $SEND_TO).
   - Verify webhook URL matches: $MATTERMOST_URL
   - Save and ensure the webhook is enabled.

4. Add Host for EC2 Instance:
   - Go to Data collection > Hosts > Create host.
   - Host name: EC2-Instance.
   - Groups: Add to Linux servers.
   - Interfaces: Add Agent, IP 127.0.0.1, Port 10050.
   - Templates: Link Template OS Linux by Zabbix agent.
   - Update.

5. Create Custom Triggers:
   - Go to Data collection > Hosts > EC2-Instance > Triggers > Create trigger.
   - No Data (60s):
     - Name: No Data Alert
     - Expression: {EC2-Instance:agent.ping.nodata(60s)}=1
     - Severity: High
   - Low Disk (<5GB free on /):
     - Name: Low Disk Space
     - Expression: {EC2-Instance:vfs.fs.size[/,free].last()}<5G
     - Severity: High
   - High RAM (>75%):
     - Name: High RAM Usage
     - Expression: {EC2-Instance:vm.memory.size[used].avg(5m)}/{EC2-Instance:vm.memory.size[total].last()}*100>75
     - Severity: High
   - Update each.

6. Create Graphs:
   - Go to Data collection > Hosts > EC2-Instance > Graphs > Create graph.
   - CPU Utilization (5m):
     - Add item: system.cpu.util[,user].avg(5m)
   - Memory Total/Free:
     - Add items: vm.memory.size[total], vm.memory.size[free]
   - Repeat for other metrics as needed.

7. Test Alerts:
   - Stress the instance: 'stress --cpu 4 --timeout 60' or stop agent: 'sudo systemctl stop zabbix-agent'.
   - Check Monitoring > Problems and Mattermost channel (prod-alerts-from-zabbix, ID: $SEND_TO) for alerts.
   - Restart agent if stopped: 'sudo systemctl start zabbix-agent'.

8. Reboot to Apply Kernel Upgrade:
   - After verifying Zabbix and Mattermost alerts, reboot to apply kernel updates:
     sudo reboot

Note: If you changed the Admin password, update the ZABBIX_ADMIN_PASSWORD environment variable or script for future runs.
EOF
